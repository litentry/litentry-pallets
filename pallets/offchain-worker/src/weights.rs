// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_offchain_worker
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-11, STEPS: [20, ], REPEAT: 50, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("./source/local.json"), DB CACHE: 20

// Executed Command:
// target/release/litentry-collator
// benchmark
// --chain=./source/local.json
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet-offchain-worker
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --output=./source/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_offchain_worker.
pub trait WeightInfo {
	fn asset_claim() -> Weight;
	fn submit_balance() -> Weight;
	fn on_finalize() -> Weight;
}

/// Weights for pallet_offchain_worker using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn asset_claim() -> Weight {
		(8_577_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn submit_balance() -> Weight {
		(34_248_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn on_finalize() -> Weight {
		(3_882_140_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(398 as Weight))
			.saturating_add(T::DbWeight::get().writes(298 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn asset_claim() -> Weight {
		(8_577_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn submit_balance() -> Weight {
		(34_248_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn on_finalize() -> Weight {
		(3_882_140_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(398 as Weight))
			.saturating_add(RocksDbWeight::get().writes(298 as Weight))
	}
}
